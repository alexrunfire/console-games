#!/usr/bin/env node

/* eslint-disable no-console */
"use strict";

var _ = require("../..");

const getSign = (firstNum, expression) => expression[String(firstNum).length + 1];

const getSecondNum = expression => {
  let secondNum = '';

  for (let i = expression.length - 1; expression[i] !== ' '; i -= 1) {
    secondNum = expression[i] + secondNum;
  }

  return secondNum;
};

const getFirstNum = expression => {
  let firstNum = '';

  for (let i = 0; expression[i] !== ' '; i += 1) {
    firstNum += expression[i];
  }

  return firstNum;
};

const getCalc = expression => {
  const firstNum = Number(getFirstNum(expression));
  const secondNum = Number(getSecondNum(expression));

  switch (getSign(firstNum, expression)) {
    case '+':
      return String(firstNum + secondNum);

    case '-':
      return String(firstNum - secondNum);

    case '*':
      return String(firstNum * secondNum);

    default:
  }

  return false;
};

const getRandomSign = () => {
  switch ((0, _.getRandomNum)(3)()) {
    case 0:
      return '+';

    case 1:
      return '-';

    case 2:
      return '*';

    default:
  }

  return false;
};

const getRandomExpr = () => `${(0, _.getRandomNum)(100)()} ${getRandomSign()} ${(0, _.getRandomNum)(100)()}`;

const name = (0, _.start)('What is the result of the expression?');
(0, _.cycle)(name, getRandomExpr, getCalc);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vZ2FtZXMvYnJhaW4tY2FsYy5qcyJdLCJuYW1lcyI6WyJnZXRTaWduIiwiZmlyc3ROdW0iLCJleHByZXNzaW9uIiwiU3RyaW5nIiwibGVuZ3RoIiwiZ2V0U2Vjb25kTnVtIiwic2Vjb25kTnVtIiwiaSIsImdldEZpcnN0TnVtIiwiZ2V0Q2FsYyIsIk51bWJlciIsImdldFJhbmRvbVNpZ24iLCJnZXRSYW5kb21FeHByIiwibmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7OztBQUVBOztBQUVBLE1BQU1BLE9BQU8sR0FBRyxDQUFDQyxRQUFELEVBQVdDLFVBQVgsS0FBMEJBLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDRixRQUFELENBQU4sQ0FBaUJHLE1BQWpCLEdBQTBCLENBQTNCLENBQXBEOztBQUNBLE1BQU1DLFlBQVksR0FBSUgsVUFBRCxJQUFnQjtBQUNuQyxNQUFJSSxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUdMLFVBQVUsQ0FBQ0UsTUFBWCxHQUFvQixDQUFqQyxFQUFvQ0YsVUFBVSxDQUFDSyxDQUFELENBQVYsS0FBa0IsR0FBdEQsRUFBMkRBLENBQUMsSUFBSSxDQUFoRSxFQUFtRTtBQUNqRUQsSUFBQUEsU0FBUyxHQUFHSixVQUFVLENBQUNLLENBQUQsQ0FBVixHQUFnQkQsU0FBNUI7QUFDRDs7QUFDRCxTQUFPQSxTQUFQO0FBQ0QsQ0FORDs7QUFPQSxNQUFNRSxXQUFXLEdBQUlOLFVBQUQsSUFBZ0I7QUFDbEMsTUFBSUQsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsT0FBSyxJQUFJTSxDQUFDLEdBQUcsQ0FBYixFQUFnQkwsVUFBVSxDQUFDSyxDQUFELENBQVYsS0FBa0IsR0FBbEMsRUFBdUNBLENBQUMsSUFBSSxDQUE1QyxFQUErQztBQUM3Q04sSUFBQUEsUUFBUSxJQUFJQyxVQUFVLENBQUNLLENBQUQsQ0FBdEI7QUFDRDs7QUFDRCxTQUFPTixRQUFQO0FBQ0QsQ0FORDs7QUFPQSxNQUFNUSxPQUFPLEdBQUlQLFVBQUQsSUFBZ0I7QUFDOUIsUUFBTUQsUUFBUSxHQUFHUyxNQUFNLENBQUNGLFdBQVcsQ0FBQ04sVUFBRCxDQUFaLENBQXZCO0FBQ0EsUUFBTUksU0FBUyxHQUFHSSxNQUFNLENBQUNMLFlBQVksQ0FBQ0gsVUFBRCxDQUFiLENBQXhCOztBQUNBLFVBQVFGLE9BQU8sQ0FBQ0MsUUFBRCxFQUFXQyxVQUFYLENBQWY7QUFDRSxTQUFLLEdBQUw7QUFDRSxhQUFPQyxNQUFNLENBQUNGLFFBQVEsR0FBR0ssU0FBWixDQUFiOztBQUNGLFNBQUssR0FBTDtBQUNFLGFBQU9ILE1BQU0sQ0FBQ0YsUUFBUSxHQUFHSyxTQUFaLENBQWI7O0FBQ0YsU0FBSyxHQUFMO0FBQ0UsYUFBT0gsTUFBTSxDQUFDRixRQUFRLEdBQUdLLFNBQVosQ0FBYjs7QUFDRjtBQVBGOztBQVNBLFNBQU8sS0FBUDtBQUNELENBYkQ7O0FBY0EsTUFBTUssYUFBYSxHQUFHLE1BQU07QUFDMUIsVUFBUSxvQkFBYSxDQUFiLEdBQVI7QUFDRSxTQUFLLENBQUw7QUFDRSxhQUFPLEdBQVA7O0FBQ0YsU0FBSyxDQUFMO0FBQ0UsYUFBTyxHQUFQOztBQUNGLFNBQUssQ0FBTDtBQUNFLGFBQU8sR0FBUDs7QUFDRjtBQVBGOztBQVNBLFNBQU8sS0FBUDtBQUNELENBWEQ7O0FBWUEsTUFBTUMsYUFBYSxHQUFHLE1BQU8sR0FBRSxvQkFBYSxHQUFiLEdBQW9CLElBQUdELGFBQWEsRUFBRyxJQUFHLG9CQUFhLEdBQWIsR0FBb0IsRUFBN0Y7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHLGFBQU0sdUNBQU4sQ0FBYjtBQUNBLGFBQU1BLElBQU4sRUFBWUQsYUFBWixFQUEyQkgsT0FBM0IiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbmltcG9ydCB7IHN0YXJ0LCBjeWNsZSwgZ2V0UmFuZG9tTnVtIH0gZnJvbSAnLi4vLi4nO1xuXG5jb25zdCBnZXRTaWduID0gKGZpcnN0TnVtLCBleHByZXNzaW9uKSA9PiBleHByZXNzaW9uW1N0cmluZyhmaXJzdE51bSkubGVuZ3RoICsgMV07XG5jb25zdCBnZXRTZWNvbmROdW0gPSAoZXhwcmVzc2lvbikgPT4ge1xuICBsZXQgc2Vjb25kTnVtID0gJyc7XG4gIGZvciAobGV0IGkgPSBleHByZXNzaW9uLmxlbmd0aCAtIDE7IGV4cHJlc3Npb25baV0gIT09ICcgJzsgaSAtPSAxKSB7XG4gICAgc2Vjb25kTnVtID0gZXhwcmVzc2lvbltpXSArIHNlY29uZE51bTtcbiAgfVxuICByZXR1cm4gc2Vjb25kTnVtO1xufTtcbmNvbnN0IGdldEZpcnN0TnVtID0gKGV4cHJlc3Npb24pID0+IHtcbiAgbGV0IGZpcnN0TnVtID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBleHByZXNzaW9uW2ldICE9PSAnICc7IGkgKz0gMSkge1xuICAgIGZpcnN0TnVtICs9IGV4cHJlc3Npb25baV07XG4gIH1cbiAgcmV0dXJuIGZpcnN0TnVtO1xufTtcbmNvbnN0IGdldENhbGMgPSAoZXhwcmVzc2lvbikgPT4ge1xuICBjb25zdCBmaXJzdE51bSA9IE51bWJlcihnZXRGaXJzdE51bShleHByZXNzaW9uKSk7XG4gIGNvbnN0IHNlY29uZE51bSA9IE51bWJlcihnZXRTZWNvbmROdW0oZXhwcmVzc2lvbikpO1xuICBzd2l0Y2ggKGdldFNpZ24oZmlyc3ROdW0sIGV4cHJlc3Npb24pKSB7XG4gICAgY2FzZSAnKyc6XG4gICAgICByZXR1cm4gU3RyaW5nKGZpcnN0TnVtICsgc2Vjb25kTnVtKTtcbiAgICBjYXNlICctJzpcbiAgICAgIHJldHVybiBTdHJpbmcoZmlyc3ROdW0gLSBzZWNvbmROdW0pO1xuICAgIGNhc2UgJyonOlxuICAgICAgcmV0dXJuIFN0cmluZyhmaXJzdE51bSAqIHNlY29uZE51bSk7XG4gICAgZGVmYXVsdDpcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgZ2V0UmFuZG9tU2lnbiA9ICgpID0+IHtcbiAgc3dpdGNoIChnZXRSYW5kb21OdW0oMykoKSkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAnKyc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuICctJztcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gJyonO1xuICAgIGRlZmF1bHQ6XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbmNvbnN0IGdldFJhbmRvbUV4cHIgPSAoKSA9PiBgJHtnZXRSYW5kb21OdW0oMTAwKSgpfSAke2dldFJhbmRvbVNpZ24oKX0gJHtnZXRSYW5kb21OdW0oMTAwKSgpfWA7XG5jb25zdCBuYW1lID0gc3RhcnQoJ1doYXQgaXMgdGhlIHJlc3VsdCBvZiB0aGUgZXhwcmVzc2lvbj8nKTtcbmN5Y2xlKG5hbWUsIGdldFJhbmRvbUV4cHIsIGdldENhbGMpO1xuIl19