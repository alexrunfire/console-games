#!/usr/bin/env node

/* eslint-disable no-console */
"use strict";

var _ = require("../..");

const outNum = (progression, partToSkip) => {
  if (partToSkip.length === 0) {
    const progr = progression.substring(3, progression.length - 1);
    const first = Number((0, _.getFirstNum)(progr));
    const last = Number((0, _.getSecondNum)(progr));
    return String(first - (last - first) / 8);
  }

  const progr = progression.substring(0, partToSkip.length - 1);
  const first = Number((0, _.getFirstNum)(progr));
  const last = Number((0, _.getSecondNum)(progr));
  return String(last + (last - first) / 8);
};

const inNum = (progression, partToSkip) => {
  const leftPart = ` ${partToSkip.substring(0, partToSkip.length - 1)}`;
  const rightPart = `${progression.substring(partToSkip.length + 3, progression.length - 1)} `;
  const left = Number((0, _.getSecondNum)(leftPart));
  const right = Number((0, _.getFirstNum)(rightPart));
  return String((left + right) / 2);
};

const findSkipped = progression => {
  let partToSkip = '';

  for (let i = 0; progression[i] !== '.'; i += 1) {
    partToSkip += progression[i];
  }

  const outInLeft = partToSkip.length === 0;
  const outInRight = partToSkip.length + 3 === progression.length;
  return outInLeft || outInRight ? outNum(progression, partToSkip) : inNum(progression, partToSkip);
};

const randomProgr = () => {
  const first = (0, _.getRandomNum)(0, 100)();
  const diff = (0, _.getRandomNum)(1, 11)();
  const skippedEl = (0, _.getRandomNum)(1, 11)();
  let progression = '';

  for (let i = 1; i < 11; i += 1) {
    if (i === skippedEl) {
      progression += '.. ';
    } else {
      progression = `${progression}${first + diff * (i - 1)} `;
    }
  }

  return progression;
};

const name = (0, _.start)('What number is missing in the progression?');
(0, _.cycle)(name, randomProgr, findSkipped);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vZ2FtZXMvYnJhaW4tcHJvZ3Jlc3Npb24uanMiXSwibmFtZXMiOlsib3V0TnVtIiwicHJvZ3Jlc3Npb24iLCJwYXJ0VG9Ta2lwIiwibGVuZ3RoIiwicHJvZ3IiLCJzdWJzdHJpbmciLCJmaXJzdCIsIk51bWJlciIsImxhc3QiLCJTdHJpbmciLCJpbk51bSIsImxlZnRQYXJ0IiwicmlnaHRQYXJ0IiwibGVmdCIsInJpZ2h0IiwiZmluZFNraXBwZWQiLCJpIiwib3V0SW5MZWZ0Iiwib3V0SW5SaWdodCIsInJhbmRvbVByb2dyIiwiZGlmZiIsInNraXBwZWRFbCIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7QUFFQTs7QUFJQSxNQUFNQSxNQUFNLEdBQUcsQ0FBQ0MsV0FBRCxFQUFjQyxVQUFkLEtBQTZCO0FBQzFDLE1BQUlBLFVBQVUsQ0FBQ0MsTUFBWCxLQUFzQixDQUExQixFQUE2QjtBQUMzQixVQUFNQyxLQUFLLEdBQUdILFdBQVcsQ0FBQ0ksU0FBWixDQUFzQixDQUF0QixFQUF5QkosV0FBVyxDQUFDRSxNQUFaLEdBQXFCLENBQTlDLENBQWQ7QUFDQSxVQUFNRyxLQUFLLEdBQUdDLE1BQU0sQ0FBQyxtQkFBWUgsS0FBWixDQUFELENBQXBCO0FBQ0EsVUFBTUksSUFBSSxHQUFHRCxNQUFNLENBQUMsb0JBQWFILEtBQWIsQ0FBRCxDQUFuQjtBQUNBLFdBQU9LLE1BQU0sQ0FBQ0gsS0FBSyxHQUFJLENBQUNFLElBQUksR0FBR0YsS0FBUixJQUFpQixDQUEzQixDQUFiO0FBQ0Q7O0FBQ0QsUUFBTUYsS0FBSyxHQUFHSCxXQUFXLENBQUNJLFNBQVosQ0FBc0IsQ0FBdEIsRUFBeUJILFVBQVUsQ0FBQ0MsTUFBWCxHQUFvQixDQUE3QyxDQUFkO0FBQ0EsUUFBTUcsS0FBSyxHQUFHQyxNQUFNLENBQUMsbUJBQVlILEtBQVosQ0FBRCxDQUFwQjtBQUNBLFFBQU1JLElBQUksR0FBR0QsTUFBTSxDQUFDLG9CQUFhSCxLQUFiLENBQUQsQ0FBbkI7QUFDQSxTQUFPSyxNQUFNLENBQUNELElBQUksR0FBRyxDQUFDQSxJQUFJLEdBQUdGLEtBQVIsSUFBaUIsQ0FBekIsQ0FBYjtBQUNELENBWEQ7O0FBWUEsTUFBTUksS0FBSyxHQUFHLENBQUNULFdBQUQsRUFBY0MsVUFBZCxLQUE2QjtBQUN6QyxRQUFNUyxRQUFRLEdBQUksSUFBR1QsVUFBVSxDQUFDRyxTQUFYLENBQXFCLENBQXJCLEVBQXdCSCxVQUFVLENBQUNDLE1BQVgsR0FBb0IsQ0FBNUMsQ0FBK0MsRUFBcEU7QUFDQSxRQUFNUyxTQUFTLEdBQUksR0FBRVgsV0FBVyxDQUFDSSxTQUFaLENBQXNCSCxVQUFVLENBQUNDLE1BQVgsR0FBb0IsQ0FBMUMsRUFBNkNGLFdBQVcsQ0FBQ0UsTUFBWixHQUFxQixDQUFsRSxDQUFxRSxHQUExRjtBQUNBLFFBQU1VLElBQUksR0FBR04sTUFBTSxDQUFDLG9CQUFhSSxRQUFiLENBQUQsQ0FBbkI7QUFDQSxRQUFNRyxLQUFLLEdBQUdQLE1BQU0sQ0FBQyxtQkFBWUssU0FBWixDQUFELENBQXBCO0FBQ0EsU0FBT0gsTUFBTSxDQUFDLENBQUNJLElBQUksR0FBR0MsS0FBUixJQUFpQixDQUFsQixDQUFiO0FBQ0QsQ0FORDs7QUFPQSxNQUFNQyxXQUFXLEdBQUlkLFdBQUQsSUFBaUI7QUFDbkMsTUFBSUMsVUFBVSxHQUFHLEVBQWpCOztBQUNBLE9BQUssSUFBSWMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JmLFdBQVcsQ0FBQ2UsQ0FBRCxDQUFYLEtBQW1CLEdBQW5DLEVBQXdDQSxDQUFDLElBQUksQ0FBN0MsRUFBZ0Q7QUFDOUNkLElBQUFBLFVBQVUsSUFBSUQsV0FBVyxDQUFDZSxDQUFELENBQXpCO0FBQ0Q7O0FBQ0QsUUFBTUMsU0FBUyxHQUFHZixVQUFVLENBQUNDLE1BQVgsS0FBc0IsQ0FBeEM7QUFDQSxRQUFNZSxVQUFVLEdBQUdoQixVQUFVLENBQUNDLE1BQVgsR0FBb0IsQ0FBcEIsS0FBMEJGLFdBQVcsQ0FBQ0UsTUFBekQ7QUFDQSxTQUFPYyxTQUFTLElBQUlDLFVBQWIsR0FBMEJsQixNQUFNLENBQUNDLFdBQUQsRUFBY0MsVUFBZCxDQUFoQyxHQUE0RFEsS0FBSyxDQUFDVCxXQUFELEVBQWNDLFVBQWQsQ0FBeEU7QUFDRCxDQVJEOztBQVNBLE1BQU1pQixXQUFXLEdBQUcsTUFBTTtBQUN4QixRQUFNYixLQUFLLEdBQUcsb0JBQWEsQ0FBYixFQUFnQixHQUFoQixHQUFkO0FBQ0EsUUFBTWMsSUFBSSxHQUFHLG9CQUFhLENBQWIsRUFBZ0IsRUFBaEIsR0FBYjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxvQkFBYSxDQUFiLEVBQWdCLEVBQWhCLEdBQWxCO0FBQ0EsTUFBSXBCLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxPQUFLLElBQUllLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsSUFBSSxDQUE3QixFQUFnQztBQUM5QixRQUFJQSxDQUFDLEtBQUtLLFNBQVYsRUFBcUI7QUFDbkJwQixNQUFBQSxXQUFXLElBQUksS0FBZjtBQUNELEtBRkQsTUFFTztBQUNMQSxNQUFBQSxXQUFXLEdBQUksR0FBRUEsV0FBWSxHQUFFSyxLQUFLLEdBQUdjLElBQUksSUFBSUosQ0FBQyxHQUFHLENBQVIsQ0FBVyxHQUF0RDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT2YsV0FBUDtBQUNELENBYkQ7O0FBY0EsTUFBTXFCLElBQUksR0FBRyxhQUFNLDRDQUFOLENBQWI7QUFDQSxhQUFNQSxJQUFOLEVBQVlILFdBQVosRUFBeUJKLFdBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG5pbXBvcnQge1xuICBzdGFydCwgY3ljbGUsIGdldFJhbmRvbU51bSwgZ2V0Rmlyc3ROdW0sIGdldFNlY29uZE51bSxcbn0gZnJvbSAnLi4vLi4nO1xuXG5jb25zdCBvdXROdW0gPSAocHJvZ3Jlc3Npb24sIHBhcnRUb1NraXApID0+IHtcbiAgaWYgKHBhcnRUb1NraXAubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgcHJvZ3IgPSBwcm9ncmVzc2lvbi5zdWJzdHJpbmcoMywgcHJvZ3Jlc3Npb24ubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3QgPSBOdW1iZXIoZ2V0Rmlyc3ROdW0ocHJvZ3IpKTtcbiAgICBjb25zdCBsYXN0ID0gTnVtYmVyKGdldFNlY29uZE51bShwcm9ncikpO1xuICAgIHJldHVybiBTdHJpbmcoZmlyc3QgLSAoKGxhc3QgLSBmaXJzdCkgLyA4KSk7XG4gIH1cbiAgY29uc3QgcHJvZ3IgPSBwcm9ncmVzc2lvbi5zdWJzdHJpbmcoMCwgcGFydFRvU2tpcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgZmlyc3QgPSBOdW1iZXIoZ2V0Rmlyc3ROdW0ocHJvZ3IpKTtcbiAgY29uc3QgbGFzdCA9IE51bWJlcihnZXRTZWNvbmROdW0ocHJvZ3IpKTtcbiAgcmV0dXJuIFN0cmluZyhsYXN0ICsgKGxhc3QgLSBmaXJzdCkgLyA4KTtcbn07XG5jb25zdCBpbk51bSA9IChwcm9ncmVzc2lvbiwgcGFydFRvU2tpcCkgPT4ge1xuICBjb25zdCBsZWZ0UGFydCA9IGAgJHtwYXJ0VG9Ta2lwLnN1YnN0cmluZygwLCBwYXJ0VG9Ta2lwLmxlbmd0aCAtIDEpfWA7XG4gIGNvbnN0IHJpZ2h0UGFydCA9IGAke3Byb2dyZXNzaW9uLnN1YnN0cmluZyhwYXJ0VG9Ta2lwLmxlbmd0aCArIDMsIHByb2dyZXNzaW9uLmxlbmd0aCAtIDEpfSBgO1xuICBjb25zdCBsZWZ0ID0gTnVtYmVyKGdldFNlY29uZE51bShsZWZ0UGFydCkpO1xuICBjb25zdCByaWdodCA9IE51bWJlcihnZXRGaXJzdE51bShyaWdodFBhcnQpKTtcbiAgcmV0dXJuIFN0cmluZygobGVmdCArIHJpZ2h0KSAvIDIpO1xufTtcbmNvbnN0IGZpbmRTa2lwcGVkID0gKHByb2dyZXNzaW9uKSA9PiB7XG4gIGxldCBwYXJ0VG9Ta2lwID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBwcm9ncmVzc2lvbltpXSAhPT0gJy4nOyBpICs9IDEpIHtcbiAgICBwYXJ0VG9Ta2lwICs9IHByb2dyZXNzaW9uW2ldO1xuICB9XG4gIGNvbnN0IG91dEluTGVmdCA9IHBhcnRUb1NraXAubGVuZ3RoID09PSAwO1xuICBjb25zdCBvdXRJblJpZ2h0ID0gcGFydFRvU2tpcC5sZW5ndGggKyAzID09PSBwcm9ncmVzc2lvbi5sZW5ndGg7XG4gIHJldHVybiBvdXRJbkxlZnQgfHwgb3V0SW5SaWdodCA/IG91dE51bShwcm9ncmVzc2lvbiwgcGFydFRvU2tpcCkgOiBpbk51bShwcm9ncmVzc2lvbiwgcGFydFRvU2tpcCk7XG59O1xuY29uc3QgcmFuZG9tUHJvZ3IgPSAoKSA9PiB7XG4gIGNvbnN0IGZpcnN0ID0gZ2V0UmFuZG9tTnVtKDAsIDEwMCkoKTtcbiAgY29uc3QgZGlmZiA9IGdldFJhbmRvbU51bSgxLCAxMSkoKTtcbiAgY29uc3Qgc2tpcHBlZEVsID0gZ2V0UmFuZG9tTnVtKDEsIDExKSgpO1xuICBsZXQgcHJvZ3Jlc3Npb24gPSAnJztcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCAxMTsgaSArPSAxKSB7XG4gICAgaWYgKGkgPT09IHNraXBwZWRFbCkge1xuICAgICAgcHJvZ3Jlc3Npb24gKz0gJy4uICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzaW9uID0gYCR7cHJvZ3Jlc3Npb259JHtmaXJzdCArIGRpZmYgKiAoaSAtIDEpfSBgO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvZ3Jlc3Npb247XG59O1xuY29uc3QgbmFtZSA9IHN0YXJ0KCdXaGF0IG51bWJlciBpcyBtaXNzaW5nIGluIHRoZSBwcm9ncmVzc2lvbj8nKTtcbmN5Y2xlKG5hbWUsIHJhbmRvbVByb2dyLCBmaW5kU2tpcHBlZCk7XG4iXX0=